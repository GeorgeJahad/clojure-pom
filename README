Clojure POM for Maven2
======================

Q: A Maven POM for Clojure ?!?

> Yes. Don't run away with your hair on fire. This is only used for dependency
management (and optionaly AOT compile clojure into java classes).

Q: How do I get started ?

> It's easy. Just follow the steps below and you'll
have access to tens of thousands of Java libraries inside Clojure

* Make sure you have > Java5 on your box

* Install Maven [ http://maven.apache.org ]

* Install Clojure & Clojure POM with git & maven.
  You can find maven-friendly repos on my github account.

git clone git://github.com/dysinger/clojure.git
cd clojure
mvn install
cd ..
git clone git://github.com/dysinger/clojure-pom.git
cd clojure-pom
mvn install
cd ..

* Now create a new clojure project.  You can create maven archetypes
  if your maven-fu is brown-belt or above.
  Sometimes good ol' 'here' files are easier. I do it like this.

mkdir my-project
cd my-project
cat >pom.xml <<\THEEND
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>clojure</groupId>
    <artifactId>clojure-pom</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <groupId>myorg</groupId>
  <artifactId>myproj</artifactId>
  <name>${artifactId}</name>
  <version>${parent.version}</version>
  <build>
    <!-- optional: precompile some clojure -->
    <plugins>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>compile</id>
            <configuration>
              <tasks>
                <java fork="true"
                      classname="clojure.lang.Compile"
                      classpathref="maven.compile.classpath">
                  <sysproperty key="clojure.compile.path"
                               value="${project.build.outputDirectory}" />
                  <arg value="myorg.myproj.hello" />
                </java>
              </tasks>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <!-- optional: 3rd party dependencies -->
    <dependency>
      <groupId>commons-math</groupId>
      <artifactId>commons-math</artifactId>
      <version>1.2</version>
    </dependency>
  </dependencies>
</project>
THEEND

mkdir -p src/myorg/myproj
cat >src/myorg/myproj/hello.clj <<\THEEND
(ns myorg.myproj.hello
  (:import (org.apache.commons.math.random JDKRandomGenerator)))
(defn main []
  (println "Hello from org.apache.commons.math.random: "
    (.nextInt (JDKRandomGenerator.))))
THEEND

mvn process-resources ; # <- now your are ready for emacs slime
mvn compile           ; # <- see it compile your clojure code
mvn install           ; # <- install a jar for other components

Q: How can I use this in Emacs / Slime ?

> You need to update your .emacs file below your clojure / swank
setup. I add a function that lets you pick the clojure project and
it automatically configures your classpath for the project.

(defun clj-mvn-proj (path)
  "Setup classpaths for a maven/clojure project & refresh slime"
  (interactive "GPath: ")
  (setq swank-clojure-binary nil)
  (setq swank-clojure-jar-path
        (expand-file-name "target/dependency" path))
  (setq swank-clojure-extra-classpaths
        (list (expand-file-name "src" path)
              (expand-file-name "target/classes" path)
              (expand-file-name "target/dependency" path)))
  (setq slime-lisp-implementations
        (cons `(clojure ,(swank-clojure-cmd) :init swank-clojure-init)
              (remove-if #'(lambda (x) (eq (car x) 'clojure))
                         slime-lisp-implementations))))

WIN!:   You can change your SLIME's classpath as you work on different
        modules in different SLIME sessions.

Bonus!: Since this POM unpacks all the dependency jars into a directory
        you can add/remove/clean/rebuild your dependencies without
        restarting your slime session.
